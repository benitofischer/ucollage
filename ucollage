#!/usr/bin/env bash
config_error() {
    echo "Configuration error [${1}]: \"${2}\" ${3}"
}

parse_config() {
    errors=0

    [[ -n "$UCOLLAGE_LINES" ]] && ! is_natural "$UCOLLAGE_LINES" \
        && config_error "UCOLLAGE_LINES" "$UCOLLAGE_LINES" "is not a natural number" \
        && unset UCOLLAGE_LINES && errors=1
    [[ -n "$UCOLLAGE_COLUMNS" ]] && ! is_natural "$UCOLLAGE_COLUMNS" \
        && config_error "UCOLLAGE_COLUMNS" "$UCOLLAGE_COLUMNS" "is not a natural number" \
        && unset UCOLLAGE_COLUMNS && errors=1
    [[ -n "$UCOLLAGE_EXEC_PROMPT" ]] && [[ ! "$UCOLLAGE_EXEC_PROMPT" =~ ^(0|1)$ ]] \
        && config_error "UCOLLAGE_EXEC_PROMPT" "$UCOLLAGE_EXEC_PROMPT" " - valid values: 0, 1" \
        && unset UCOLLAGE_EXEC_PROMPT && errors=1
    [[ -n "$UCOLLAGE_SHOW_NAMES" ]] && [[ ! "$UCOLLAGE_SHOW_NAMES" =~ ^(0|1)$ ]] \
        && config_error "UCOLLAGE_SHOW_NAMES" "$UCOLLAGE_SHOW_NAMES" " - valid values: 0, 1" \
        && unset UCOLLAGE_SHOW_NAMES && errors=1
    [[ -n "$UCOLLAGE_EXPAND_DIRS" ]] && [[ ! "$UCOLLAGE_EXPAND_DIRS" =~ ^(0|1|ask)$ ]] \
        && config_error "UCOLLAGE_EXPAND_DIRS" "$UCOLLAGE_EXPAND_DIRS" " - valid values: 0, 1, ask" \
        && unset UCOLLAGE_EXPAND_DIRS && errors=1
    [[ -n "$UCOLLAGE_SORT_BY" ]] && [[ ! "$UCOLLAGE_SORT_BY" =~ ^(name|time|size|extension)$ ]] \
        && config_error "UCOLLAGE_SORT_BY" "$UCOLLAGE_SORT_BY" " - valid values: name, time, size, extension" \
        && unset UCOLLAGE_SORT_BY && errors=1
    [[ -n "$UCOLLAGE_SORT_REVERSE" ]] && [[ ! "$UCOLLAGE_SORT_REVERSE" =~ ^(0|1)$ ]] \
        && config_error "UCOLLAGE_SORT_REVERSE" "$UCOLLAGE_SORT_REVERSE" " - valid values: 0, 1" \
        && unset UCOLLAGE_SORT_REVERSE && errors=1
    [[ -n "$UCOLLAGE_SCALER" ]] \
        && [[ ! "$UCOLLAGE_SCALER" =~ ^(crop|distort|fit_contain|contain|forced_cover|cover)$ ]] \
        && config_error "UCOLLAGE_SCALER" "$UCOLLAGE_SCALER" " - valid values: crop, distort,
            fit_contain, contain, forced_cover, cover" \
        && unset UCOLLAGE_SCALER && errors=1

    [[ "$errors" -eq 1 ]] && read -rsN1
    unset errors
}

set_defaults() {
    fit_vertical=${UCOLLAGE_LINES:-3}
    fit_horizontal=${UCOLLAGE_COLUMNS:-4}
    tmp_dir=${UCOLLAGE_TMP_DIR:-"/tmp/ucollage"}
    exec_prompt=${UCOLLAGE_EXEC_PROMPT:-0}
    show_names=${UCOLLAGE_SHOW_NAMES:-1}
    expand_dirs=${UCOLLAGE_EXPAND_DIRS:-"ask"}
    sort_by=${UCOLLAGE_SORT_BY:-name}
    sort_reverse=${UCOLLAGE_SORT_REVERSE:0}
    scaler=${UCOLLAGE_SCALER:-"cover"}
    error=""
    warning=""
    success=""
    prefix=""
}

help(){
    echo "Usage: ucollage [images] [directories]"
    echo
    echo "Controls:"
    echo "  m/M         enter monocle mode: show only one image (equivalent to 1g/1G)"
    echo "  Backspace   exit monocle mode"
    echo "  n/N         get next/last batch of images"
    echo "  p/P         get previous/first batch of images"
    echo "  s           input exact number for lines and columns"
    echo "  q           exit"
    echo
    echo "Controls with vim-like prefix counters"
    echo "  [N]-        decrease both the numbers of columns and lines by N"
    echo "  [N]+/=      increase both the numbers of columns and lines by N"
    echo "  [N]h        decrease number of columns by N"
    echo "  [N]j        decrease number of lines by N"
    echo "  [N]k        increase number of lines by N"
    echo "  [N]l        increase number of columns by N"
    echo "  [N]c/C      rename image with (local/global) index N"
    echo "  [N]g/G      go to image with (local/global) index N"
    echo "  [N]x/X      execute command for image with (local/global) index N"
    echo "              placeholders are available for command execution"
    echo "                  %s - original image filename"
    echo
    echo "Monocle mode controls:"
    echo "  r           rotate image 90 degrees clockwise"
    echo "  R           rotate image 90 degrees counterclockwise"
    echo "  u           rotate image 180 degrees"
    echo "  c/C         rename image"
    echo "  x/X         execute command"
    echo "              placeholders are available for command execution"
    echo "                  %s - original image filename"
    echo "                  %r - rotated image filename"
    exit
}

check_dependencies() {
    for dependency in ueberzug file basename
    do
        if ! command -v "$dependency" &>/dev/null
        then
            echo "Required dependency not installed: $dependency" && exit 1
        fi
    done
}

pre_read_images() {
    list_file_cmd="ls -d"
    [[ "$sort_reverse" -eq 1 ]] && list_file_cmd+=" -r"
    if [[ "$sort_by" == "name" ]]
    then
        list_file_cmd+=""
    elif [[ "$sort_by" == "time" ]]
    then
        list_file_cmd+=" -t"
    elif [[ "$sort_by" == "size" ]]
    then
        list_file_cmd+=" -S"
    elif [[ "$sort_by" == "extension" ]]
    then
        list_file_cmd+=" -X"
    fi
    if [[ "$#" -gt 0 ]]
    then
        mapfile -t filelist < <(eval "$list_file_cmd $*")
    else
        mapfile -t filelist < <(eval "$list_file_cmd *")
    fi
    if [[ "$expand_dirs" -eq 1 ]]
    then
        for item in "${filelist[@]}"
        do
            [[ -d "$item" ]] && filelist+=("$item"/*)
        done
    elif [[ "$expand_dirs" == "ask" ]]
    then
        for item in "${filelist[@]}"
        do
            [[ -d "$item" ]] && read -p "Expand $item? (n, Esc: no, N: no to all)" -rsN1 char && echo
            [[ "$char" == "N" ]] && break
            [[ ! "$char" =~ ^(n|$'\e')$ ]] && filelist+=("$item"/*)
        done
    fi
    argc="${#filelist[@]}"
    images=()
    read_iter=0
}

read_images() {
    read_target="$1"
    readc=0
    while (( readc < read_target && read_iter < argc ))
    do
        file=${filelist[$read_iter]}
        if [[ $(file --mime-type -b "$file") =~ ^image/.*$ ]]
        then
            images+=("$file") && (( readc += 1 ))
        else
            [[ -z "$start" ]] && printf "." # only print if ui is not started
        fi
        (( read_iter += 1 ))
    done
    printf "\n"
    total="${#images[@]}"
}

clear_screen() {
    printf "\e[2J\e[?25l\e[H"
}

clear_status() {
    # clear only first three lines of screen
    printf "\e[?25l\e[H\e[2B\e[2K\e[1J\e[H"
}

clear_names() {
    # clear from 4th line and down
    printf "\e[?25l\e[H\e[3B\e[2K\e[0J\e[H"
}

empty_messages() {
    success=""
    error=""
    warning=""
}

empty_prefix() {
    prefix=""
}

show_cursor() {
    printf "\e[?25h"
}

start_daemon() {
    fifo=$(mktemp --dry-run "${tmp_dir}/fifo-XXXXXXXXX")
    mkfifo "$fifo"
    ueberzug layer --parse bash --silent < "$fifo" &
    exec {colfd}> "$fifo"
}

stop_daemon() {
    exec {colfd}>&-
    rm -f "$fifo"
    [[ ! "$1" == "--no-exit" ]] && clear_screen && rm -rf "$tmp_dir" && show_cursor && stty echo && exit
}

restart_daemon() {
    stop_daemon --no-exit
    start_daemon
}

calculate_dimensions() {
    read -r lines columns < <(stty size)
    (( photo_columns = columns / fit_horizontal ))
    (( photo_lines = (lines - 3) / fit_vertical ))
    (( batch = fit_horizontal * fit_vertical ))
    (( show = total - start ))
    [[ "$show" -gt "$batch" ]] && show="$batch"
}

pad_sides() {
    length="${#current_name}"
    (( pads = photo_columns - length ))
    (( leftpad = pads / 2 ))
    (( rightpad = pads - leftpad ))
    for (( p = 0; p < leftpad; p++))
    do
        current_name=" $current_name"
    done
    for (( p = 0; p < rightpad; p++))
    do
        current_name+=" "
    done
}

show_batch() {
    cnt=0
    [[ "$show" -lt 1 ]] && return 1
    if [[ "$show_names" -eq 1 ]] && [[ "$show" -gt 1 ]]
    then
        # Substracting 3 lines is a hack. The names can be printed in
        # two lines, but ueberzug is not exact in its drawing on the
        # terminal lines for different window sizes.
        # So I give it some more room for error.
        (( draw_lines = photo_lines - 3 ))
    else
        draw_lines="$photo_lines"
    fi
    for (( i = 0; i < fit_vertical; i++ ))
    do
        for (( j = 0; j < fit_horizontal; j++, cnt++ ))
        do
            (( index = start + i * fit_horizontal + j))
            (( posx = j * photo_columns))
            (( posy = 3 + i * photo_lines))
            if [[ "$cnt" -lt "$show" ]]
            then
                assoc=( [action]=add \
                        [identifier]="${fifo}${i}${j}" \
                        [path]="${images[$index]}" \
                        [width]="$photo_columns" \
                        [height]="$draw_lines" \
                        [x]="$posx" \
                        [y]="$posy" \
                        [scaler]="$scaler" )
            fi
            declare -p assoc > "$fifo"
        done
    done
    return 0
}

compute_batch() {
    case $1 in
        next)
            # There exists an edge case here when $show is less that
            # $batch, but we are not in the last batch of images
            # This can happen when we are loading the images in the background
            # and the user has changes the batch size with the 's' option
            # right after starting up.
            if (( start + show < total ))
            then
                (( new_start = start + show ))
            else
                warning="End of files"
            fi
            ;;
        last)
            (( new_start = total - ((total - 1) % batch + 1) ))
            [[ "$new_start" -le "$start" ]] && warning="End of files"
            ;;
        prev)
            [[ "$start" -eq 0 ]] && warning="Start of files"
            (( new_start = start - batch))
            # The below is useful in case of resizing
            # If I am in the second of batches of 10 and the
            # new window fits 20 then I don't want negative numbers
            [[ "$new_start" -lt 0 ]] && new_start=0
            ;;
        first)
            [[ "$start" -eq 0 ]] && warning="Start of files"
            new_start=0
            ;;
    esac
    [[ -z "$warning" ]] && rm -f "$rotated_file" && return 0 || return 1
}

get_input() {
    show_cursor
    printf "%s\e7" "$1"
    left=""
    right=""
    while true
    do
        printf "\e8\e[K"
        move=""
        [[ -n "$right" ]] && move="\e[${#right}D"
        printf "%s%s$move" "$left" "$right"
        read -rsN1 char
        read -rsN1 -t 0.0001 k1
        read -rsN1 -t 0.0001 k2
        read -rsN1 -t 0.0001 k3
        read -rsN1 -t 0.0001 k4
        key="${char}${k1}${k2}${k3}${k4}"
        case "$key" in
            $'\e[D') #left arrow press
                if [[ -n "$left" ]]
                then
                    right="${left: -1}$right";
                    left="${left:0:-1}"
                fi
                continue
                ;;
            $'\e[C') #right arrow press
                if [[ -n "$right" ]]
                then
                    left="$left${right:0:1}"
                    right="${right:1}";
                fi
                continue
                ;;
            $'\e[H'|$'\e[1~')
                right="${left}${right}"
                left=""
                continue
                ;;
            $'\e[F'|$'\e[4~')
                left="${left}${right}"
                right=""
                continue
                ;;
            $'\e[3~'|$'\e[P')
                [[ -n "$right" ]] && right="${right:1}"
                continue
                ;;
            $'\e')
                input="ESCAPE";
                break
                ;;
            $'\b'|$'\x7F')
                [[ -n "$left" ]] && left="${left:0:-1}"
                continue
                ;;
            $'\n')
                input="$left$right";
                break
                ;;
            [0-9]|[A-Z]|[a-z]|' '|[\/\:\;\|\<\>?+\-%._\\*@!$])
                left+="$key"
                continue
                ;;
            *)
                continue
                ;;
        esac
    done
    [[ "$input" == "ESCAPE" || -z "$input" ]] && return 1 || return 0
}

is_natural() {
    [[ "$1" =~ ^[1-9][0-9]*$|^0+[1-9]+$ ]]
}

set_error() {
    error="(Error) Invalid value for $1: $2"
}

give_dimensions() {
    new_fit_vertical="$fit_vertical"
    new_fit_horizontal="$fit_horizontal"
    read -r lines columns < <(stty size)
    (( max_lines = lines -3 ))

    ! get_input "Give number of lines [default: $fit_vertical, max: $max_lines]: " && return
    ! is_natural "$input" && set_error lines "$input" && return
    [[ ! "$input" -eq "$fit_vertical" ]] && (( new_fit_vertical = input ))

    printf "\n"
    ! get_input "Give number of columns [Default: $fit_horizontal, Max: $columns]: " && return
    ! is_natural "$input" && set_error columns "$input" && return
    [[ ! "$input" -eq "$photo_columns" ]] && (( new_fit_horizontal = input ))
}

print_names() {
    read -r lines columns < <(stty size)
    separator=""
    for (( s = 0; s < columns; s++ ))
    do
        separator+="─"
    done
    l=${#line_names[@]}
    for (( i = 0; i < l; i++))
    do
        (( current_line = 2 + (i + 1) * photo_lines ))
        printf "\e[%s;1f" "$current_line"
        printf "\e[2K%s" "${line_names[$i]}"
        (( current_line += 1 ))
        printf "\e[%s;1f" "$current_line"
        printf "%s" "$separator"
    done
}

modify_names() {
    cnt=0
    [[ "$show_names" -eq 0 ]] || [[ "$show" -eq 1 ]] && return 1
    line_names=()
    for (( i = 0; i < fit_vertical; i++ ))
    do
        names=""
        for (( j = 0; j < fit_horizontal; j++, cnt++ ))
        do
            (( index = start + i * fit_horizontal + j))
            if [[ "$cnt" -lt "$show" ]]
            then
                (( current_number = i * fit_horizontal + j + 1 ))
                current_name="${current_number}: $(basename "${images[$index]}")"
                (( max_length = photo_columns - 2 ))
                current_name=${current_name:0:$max_length}
                pad_sides
                names+="$current_name"
            fi
        done
        [[ -n "$names" ]] && line_names+=("$names")
    done
    return 0
}

update_names() {
    clear_names
    modify_names && print_names
}

redraw() {
    restart_daemon
    calculate_dimensions
    show_batch
    update_names
}

maybe_redraw() {
    read -r lines columns < <(stty size)
    if (( new_fit_vertical != fit_vertical || new_fit_horizontal != fit_horizontal || new_start != start ))
    then
        (( new_fit_vertical > lines - 3 || new_fit_vertical < 1 )) \
            && set_error lines "$new_fit_vertical" && return
        (( new_fit_horizontal > columns || new_fit_horizontal < 1 )) \
            && set_error columns "$new_fit_horizontal" && return
        if [[ "$new_fit_vertical" -eq 1 && "$new_fit_horizontal" -eq 1 && "$batch" -gt 1 ]]
        then
            wide_vertical="$fit_vertical"
            wide_horizontal="$fit_horizontal"
            wide_start="$start"
        fi
        (( wide_batch = wide_vertical * wide_horizontal ))
        if [[ "$wide_batch" -gt 0 ]]
        then
            while (( new_start > wide_start + wide_batch ))
            do
                (( wide_start = wide_start + wide_batch ))
            done
            while (( new_start < wide_start ))
            do
                (( wide_start = wide_start - wide_batch ))
            done
        fi
        fit_vertical="$new_fit_vertical"
        fit_horizontal="$new_fit_horizontal"
        start="$new_start"
        [[ -f "$rotated_file" ]] && rm -f "$rotated_file"
        redraw
    fi
}

print_info() {
    info="[$fit_vertical x $fit_horizontal]"
    if [[ "$show" -gt 1 ]]
    then
        ((begin = start + 1))
        ((finish = begin + show - 1))
        info+=" - Photos [$begin - $finish] of $total"
    else
        ((begin = start + 1))
        info+=" - Photo $begin of $total - $(basename "${images[$start]}")"
    fi
    [[ -n "$prefix" ]] && info+=" ($prefix)"
    printf "%s" "$info"
}

in_monocle() {
    [[ "$batch" -eq 1 ]] && return 0
    [[ -n "$1" ]] && warning="${1} option available for single images. Press [m] or N[g] to enter monocle mode"
    return 1
}

rotate() {
    ! in_monocle "Rotate" && return 1
    ! command -v convert &> /dev/null && error="imagemagick not installed: required for rotation of images" && return 1
    rotated_file="${tmp_dir}/rotated-$(basename "${images[$start]}")"
    [[ ! -f "$rotated_file" ]] && cp "${images[$start]}" "$rotated_file"
    error=$(convert -rotate "$degrees" "$rotated_file" "$rotated_file" 2>&1 >/dev/null)
    error=$(echo "$error" | head -3)
    [[ -n "$error" ]] && return 1
    assoc=( [action]=add \
            [identifier]="${fifo}00" \
            [path]="$rotated_file" \
            [width]="$photo_columns" \
            [height]="$photo_lines" \
            [x]="$posx" \
            [y]="$posy" \
            [scaler]="$scaler" )
    declare -p assoc > "$fifo"
    return 0
}

eval_cmd() {
    if [[ "$exec_prompt" -eq 1 ]]
    then
        clear_status
        printf "%s? (press n/N/Esc to abort)" "$1"
        read -rsN1 ans
        if [[ ! "$ans" =~ ^(n|N|$'\e')$ ]]
        then
            error=$(eval "$2" 2>&1 >/dev/null)
            error=$(echo "$error" | head -3)
            [[ -z "$error" ]] && success="$3" && return 0
        fi
    else
        error=$(eval "$cmd" 2>&1 >/dev/null)
        error=$(echo "$error" | head -3)
        [[ -z "$error" ]] && success="$3" && return 0
    fi
    return 1
}

valid_index() {
    if [[ "$scope" == "global" ]]
    then
        [[ "$image_index" -ge 0 ]] && [[ "$image_index" -lt "$total" ]] && return 0
        (( humanized_index = image_index + 1 ))
        set_error "global index" "${humanized_index}: valid in range [1, $total]" && return 1
    else
        [[ "$image_index" -ge 0 ]] && [[ "$image_index" -lt "$show" ]] && return 0
        (( humanized_index = image_index + 1 ))
        set_error "local index" "${humanized_index}: valid in range [1, $show]" && return 1
    fi
}

get_image_index() {
    if [[ -n "$hardcode_index" ]]
    then
        (( image_index = hardcode_index ))
        unset hardcode_index
    elif [[ -n "$prefix" ]]
    then
        image_index="$prefix"
    elif [[ "$batch" -eq 1 ]]
    then
        image_index=1
    else
        ! get_input "Give $scope index to $1: " && return 1
        image_index="$input"
        clear_status
    fi
    (( image_index -= 1 ))
    ! valid_index && return 1
    [[ "$scope" == "local" ]] && (( image_index = start + image_index))
    return 0
}

global_jump() {
    (( image_index < start || image_index >= start + show)) && goto_image "$image_index" && return 0
    return 1
}

execute() {
    ! get_image_index "execute" && return 1
    echo
    printf "%%s: %s\n" "${images[$image_index]}"
    [[ -f "$rotated_file" ]] && printf "%%r: %s" "$rotated_file"
    printf "\e[H"
    ! get_input "Command: " && return 1
    cmd=${input//%s/${images[$image_index]}}
    cmd=${cmd//%r/${rotated_file}}
    eval_cmd "Execute: \"${cmd}\"" "$cmd" "Succesful execution" && global_jump
}

rename() {
    ! get_image_index "rename" && return 1
    printf "Old name: %s\n" "${images[$image_index]}"
    ! get_input "New name: " && return 1
    cmd="mv ${images[$image_index]} $input"
    eval_cmd "Rename to: \"${input}\"" "$cmd" "Succesfully renamed" \
        && images[$image_index]="$input" && global_jump || update_names
}

goto_image() {
    ! get_image_index "go to" && return
    new_start="$image_index"
    new_fit_vertical=1
    new_fit_horizontal=1
    maybe_redraw
}

update_status() {
    clear_status
    if [[ -n "$success" ]]
    then
        printf "\e[32m%s\e[m" "$success"
    elif [[ -n "$error" ]]
    then
        printf "\e[31m%s\e[m" "$error"
    elif [[ -n "$warning" ]]
    then
        printf "\e[33m%s\e[m" "$warning"
    else
        print_info
    fi
}

read_key() {
    while true
    do
        read -rsN1 -t 0.001 key
        case $key in
            q)
                stop_daemon
                ;;
            n|N|p|P)
                empty_messages
                case $key in
                    n)
                        keyword=next
                        ;;
                    N)
                        keyword=last
                        ;;
                    p)
                        keyword=prev
                        ;;
                    P)
                        keyword=first
                        ;;
                esac
                new_fit_vertical="$fit_vertical"
                new_fit_horizontal="$fit_horizontal"
                compute_batch "$keyword" && maybe_redraw
                empty_prefix
                update_status
                ;;
            s)
                stty echo
                empty_messages
                clear_status
                give_dimensions
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                stty -echo
                ;;
            +|=)
                empty_messages
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical + 1 ))
                    (( new_fit_horizontal = fit_horizontal + 1 ))
                else
                    (( new_fit_vertical = fit_vertical + prefix ))
                    (( new_fit_horizontal = fit_horizontal + prefix ))
                fi
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                ;;
            -)
                empty_messages
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical - 1 ))
                    (( new_fit_horizontal = fit_horizontal - 1 ))
                else
                    (( new_fit_vertical = fit_vertical - prefix ))
                    (( new_fit_horizontal = fit_horizontal - prefix ))
                fi
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                ;;
            m|M)
                [[ "$key" == "m" ]] && scope="local" || scope="global"
                empty_messages
                hardcode_index=1
                goto_image
                empty_prefix
                update_status
                ;;
            $'\b'|$'\x7F')
                empty_messages
                if [[ "$show" -eq 1 ]]
                then
                    fit_vertical="$wide_vertical"
                    fit_horizontal="$wide_horizontal"
                    start="$wide_start"
                    redraw
                fi
                empty_prefix
                update_status
                ;;
            k)
                empty_messages
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical + 1 ))
                else
                    (( new_fit_vertical = fit_vertical + prefix ))
                fi
                (( new_fit_horizontal = fit_horizontal ))
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                ;;
            j)
                empty_messages
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_vertical = fit_vertical - 1 ))
                else
                    (( new_fit_vertical = fit_vertical - prefix ))
                fi
                (( new_fit_horizontal = fit_horizontal ))
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                ;;
            l)
                empty_messages
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_horizontal = fit_horizontal + 1 ))
                else
                    (( new_fit_horizontal = fit_horizontal + prefix ))
                fi
                (( new_fit_vertical = fit_vertical ))
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                ;;
            h)
                empty_messages
                if [[ -z "$prefix" ]]
                then
                    (( new_fit_horizontal = fit_horizontal - 1 ))
                else
                    (( new_fit_horizontal = fit_horizontal - prefix ))
                fi
                (( new_fit_vertical = fit_vertical ))
                new_start="$start"
                maybe_redraw
                empty_prefix
                update_status
                ;;
            r|R|u)
                empty_messages
                case $key in
                    r)
                        degrees=90
                        ;;
                    R)
                        degrees="-90"
                        ;;
                    u)
                        degrees=180
                        ;;
                esac
                ! rotate && update_status
                empty_prefix
                ;;
            x|X)
                [[ "$key" == "x" ]] && scope="local" || scope="global"
                stty echo
                empty_messages
                clear_status
                execute
                empty_prefix
                update_status
                stty -echo
                ;;
            c|C)
                [[ "$key" == "c" ]] && scope="local" || scope="global"
                stty echo
                empty_messages
                clear_status
                rename && ! in_monocle && update_names
                empty_prefix
                update_status
                stty -echo
                ;;
            g|G)
                [[ "$key" == "g" ]] && scope="local" || scope="global"
                stty echo
                empty_messages
                clear_status
                goto_image
                empty_prefix
                update_status
                stty -echo
                ;;
            [0-9])
                empty_messages
                prefix+="$key"
                update_status
                ;;
            $'\e'|$'\n')
                empty_messages
                empty_prefix
                update_status
                ;;
        esac
        [[ read_iter -lt "$argc" ]] && read_images "$batch" && update_status
    done
}

init() {
    start_daemon
    calculate_dimensions
    show_batch
    clear_screen
    update_status
    update_names
    read_key
}

check_dependencies
parse_config
set_defaults
[[ ! -d "$tmp_dir" ]] && mkdir -p "$tmp_dir"
trap stop_daemon SIGINT
trap "redraw; update_status" SIGWINCH
[[ "$1" =~ ^-h$|^--help$ ]] && help
(( first_batch = fit_vertical * fit_horizontal ))
pre_read_images "$@"
stty -echo
unset start #make sure that start is not set, makes check in read_images
read_images "$first_batch"
[[ "$total" -eq 0 ]] && echo "No images to show" && stty echo && exit 1
start=0
declare -A assoc
init
